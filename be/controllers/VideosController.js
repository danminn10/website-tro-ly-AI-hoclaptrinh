const Videos  = require('../models/Videos');
const { uploadToCloudinary, deleteFileFromCloudinary } = require('../config/cloudinary');  // Import c√°c h√†m x·ª≠ l√Ω Cloudinary
const fs = require('fs');
const path = require('path');


// L·∫•y t·∫•t c·∫£ video
const getAllVideos = async (req, res) => {
  try {
    const videos = await Videos.findAll();
    res.status(200).json(videos);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch video' });
  }
};

const createVideo = async (req, res) => {
  try {
    const { title, description, category, courseId } = req.body;

    // N·∫øu c√≥ file video, upload l√™n Cloudinary v√† l·∫•y URL tr·∫£ v·ªÅ
    let videoUrl = null;
    if (req.file) {
      videoUrl = await uploadToCloudinary(req.file.path); // Upload l√™n Cloudinary
      // X√≥a file t·∫°m th·ªùi sau khi upload l√™n Cloudinary
      const filePath = path.join(__dirname, '..', 'uploads', req.file.filename);  // ƒê∆∞·ªùng d·∫´n file t·∫°m
      fs.unlink(filePath, (err) => {
        if (err) {
          console.error('Failed to delete temporary file:', err);
        } else {
          console.log('Temporary file deleted successfully');
        }
      });
    }

    console.log("Data to create video:", { title, description, category, courseId, videoUrl });


    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·ªÉ t·∫°o video
    const videoData = {
      title,
      description,
      category,
      courseId,
      url: videoUrl || '',  // N·∫øu kh√¥ng c√≥ videoUrl, s·∫Ω ƒë·ªÉ tr·ªëng
    };

    console.log("Data to create video:", videoData);

    // T·∫°o video m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
    const newVideo = await Videos.create(videoData);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
    res.status(201).json({
      message: 'Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      newVideo,
    });
  } catch (err) {
    console.error('Error creating video:', err);
    res.status(500).json({
      error: 'C√≥ l·ªói x·∫£y ra khi t·∫°o video m·ªõi',
      details: err.message || err,
    });
  }
};
// C·∫≠p nh·∫≠t video
const updateVideo = async (req, res) => {
  const { id } = req.params;

  try {
    const video = await Videos.findByPk(id);

    if (!video) {
      return res.status(404).json({ error: 'Video kh√¥ng t·ªìn t·∫°i' });
    }

    let videoUrl = video.url;
    if (req.file) {
      // X√≥a video c≈© kh·ªèi Cloudinary
      await deleteFileFromCloudinary(video.url);

      // Upload video m·ªõi l√™n Cloudinary
      videoUrl = await uploadToCloudinary(req.file.path);
    }

    // C·∫≠p nh·∫≠t th√¥ng tin video
    video.title = req.body.title || video.title;
    video.description = req.body.description || video.description;
    video.url = videoUrl;
    video.category = req.body.category || video.category;
    video.courseId = req.body.courseId || video.courseId;

    await video.save();
    res.status(200).json(video);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t video' });
  }
};

// X√≥a video
const deleteVideo = async (req, res) => {
  const { id } = req.params;

  try {
    const video = await Videos.findByPk(id);

    if (!video) {
      return res.status(404).json({ error: 'Video kh√¥ng t·ªìn t·∫°i' });
    }

    // X√≥a video kh·ªèi Cloudinary
    await deleteFileFromCloudinary(video.url);

    // X√≥a video trong c∆° s·ªü d·ªØ li·ªáu
    await video.destroy();
    res.status(200).json({ message: 'Video ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'C√≥ l·ªói x·∫£y ra khi x√≥a video' });
  }
};

const getVideosByCategory = async (req, res) => {
  const { category } = req.params;
  const { courseId } = req.query; // L·∫•y `courseId` t·ª´ query parameters

  try {
    const queryOptions = { where: { category } };

    if (courseId) {
      queryOptions.where.courseId = courseId;
    }

    const videos = await Videos.findAll(queryOptions);

    if (!videos.length) {
      return res.status(204).json({ message: 'Kh√¥ng c√≥ video n√†o trong danh m·ª•c n√†y' });
    }

    res.status(200).json(videos);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'C√≥ l·ªói x·∫£y ra khi l·∫•y video theo danh m·ª•c' });
  }
};
const getVideoById = async (req, res) => {
  const { id } = req.params;

  try {
    console.log("üìå ƒêang t√¨m video v·ªõi ID:", id); // Debug

    // Ki·ªÉm tra n·∫øu ID kh√¥ng h·ª£p l·ªá
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid video ID format" });
    }

    // T√¨m video theo ID (ph·∫£i chuy·ªÉn ID th√†nh s·ªë nguy√™n)
    const video = await Videos.findOne({
      where: { videoId: parseInt(id, 10) }, // L·ªçc theo videoId
    });

    if (!video) {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video v·ªõi ID ${id}`);
      return res.status(404).json({ message: "Video not found" });
    }

    res.status(200).json(video);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y video theo ID:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error });
  }
};
module.exports = {
  getAllVideos,
  getVideoById, 
  createVideo,
  updateVideo,
  deleteVideo,
  getVideosByCategory
};

